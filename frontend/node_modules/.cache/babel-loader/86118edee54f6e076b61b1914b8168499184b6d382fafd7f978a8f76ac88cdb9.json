{"ast":null,"code":"/**\r\n * Copyright (c) Meta Platforms, Inc. and affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * \r\n * @format\r\n */\n'use strict';\n\nimport AnimatedInterpolation from './AnimatedInterpolation';\nimport AnimatedWithChildren from './AnimatedWithChildren';\nimport InteractionManager from '../../../../exports/InteractionManager';\nimport NativeAnimatedHelper from '../NativeAnimatedHelper';\nvar NativeAnimatedAPI = NativeAnimatedHelper.API;\n/**\r\n * Animated works by building a directed acyclic graph of dependencies\r\n * transparently when you render your Animated components.\r\n *\r\n *               new Animated.Value(0)\r\n *     .interpolate()        .interpolate()    new Animated.Value(1)\r\n *         opacity               translateY      scale\r\n *          style                         transform\r\n *         View#234                         style\r\n *                                         View#123\r\n *\r\n * A) Top Down phase\r\n * When an Animated.Value is updated, we recursively go down through this\r\n * graph in order to find leaf nodes: the views that we flag as needing\r\n * an update.\r\n *\r\n * B) Bottom Up phase\r\n * When a view is flagged as needing an update, we recursively go back up\r\n * in order to build the new value that it needs. The reason why we need\r\n * this two-phases process is to deal with composite props such as\r\n * transform which can receive values from multiple parents.\r\n */\n\nfunction _flush(rootNode) {\n  var animatedStyles = new Set();\n  function findAnimatedStyles(node) {\n    /* $FlowFixMe(>=0.68.0 site=react_native_fb) This comment suppresses an\r\n     * error found when Flow v0.68 was deployed. To see the error delete this\r\n     * comment and run Flow. */\n    if (typeof node.update === 'function') {\n      animatedStyles.add(node);\n    } else {\n      node.__getChildren().forEach(findAnimatedStyles);\n    }\n  }\n  findAnimatedStyles(rootNode);\n  /* $FlowFixMe */\n\n  animatedStyles.forEach(animatedStyle => animatedStyle.update());\n}\n/**\r\n * Standard value for driving animations.  One `Animated.Value` can drive\r\n * multiple properties in a synchronized fashion, but can only be driven by one\r\n * mechanism at a time.  Using a new mechanism (e.g. starting a new animation,\r\n * or calling `setValue`) will stop any previous ones.\r\n *\r\n * See https://reactnative.dev/docs/animatedvalue.html\r\n */\n\nclass AnimatedValue extends AnimatedWithChildren {\n  constructor(value) {\n    super();\n    if (typeof value !== 'number') {\n      throw new Error('AnimatedValue: Attempting to set value to undefined');\n    }\n    this._startingValue = this._value = value;\n    this._offset = 0;\n    this._animation = null;\n  }\n  __detach() {\n    if (this.__isNative) {\n      NativeAnimatedAPI.getValue(this.__getNativeTag(), value => {\n        this._value = value;\n      });\n    }\n    this.stopAnimation();\n    super.__detach();\n  }\n  __getValue() {\n    return this._value + this._offset;\n  }\n  /**\r\n   * Directly set the value.  This will stop any animations running on the value\r\n   * and update all the bound properties.\r\n   *\r\n   * See https://reactnative.dev/docs/animatedvalue.html#setvalue\r\n   */\n\n  setValue(value) {\n    if (this._animation) {\n      this._animation.stop();\n      this._animation = null;\n    }\n    this._updateValue(value, !this.__isNative\n    /* don't perform a flush for natively driven values */);\n\n    if (this.__isNative) {\n      NativeAnimatedAPI.setAnimatedNodeValue(this.__getNativeTag(), value);\n    }\n  }\n  /**\r\n   * Sets an offset that is applied on top of whatever value is set, whether via\r\n   * `setValue`, an animation, or `Animated.event`.  Useful for compensating\r\n   * things like the start of a pan gesture.\r\n   *\r\n   * See https://reactnative.dev/docs/animatedvalue.html#setoffset\r\n   */\n\n  setOffset(offset) {\n    this._offset = offset;\n    if (this.__isNative) {\n      NativeAnimatedAPI.setAnimatedNodeOffset(this.__getNativeTag(), offset);\n    }\n  }\n  /**\r\n   * Merges the offset value into the base value and resets the offset to zero.\r\n   * The final output of the value is unchanged.\r\n   *\r\n   * See https://reactnative.dev/docs/animatedvalue.html#flattenoffset\r\n   */\n\n  flattenOffset() {\n    this._value += this._offset;\n    this._offset = 0;\n    if (this.__isNative) {\n      NativeAnimatedAPI.flattenAnimatedNodeOffset(this.__getNativeTag());\n    }\n  }\n  /**\r\n   * Sets the offset value to the base value, and resets the base value to zero.\r\n   * The final output of the value is unchanged.\r\n   *\r\n   * See https://reactnative.dev/docs/animatedvalue.html#extractoffset\r\n   */\n\n  extractOffset() {\n    this._offset += this._value;\n    this._value = 0;\n    if (this.__isNative) {\n      NativeAnimatedAPI.extractAnimatedNodeOffset(this.__getNativeTag());\n    }\n  }\n  /**\r\n   * Stops any running animation or tracking. `callback` is invoked with the\r\n   * final value after stopping the animation, which is useful for updating\r\n   * state to match the animation position with layout.\r\n   *\r\n   * See https://reactnative.dev/docs/animatedvalue.html#stopanimation\r\n   */\n\n  stopAnimation(callback) {\n    this.stopTracking();\n    this._animation && this._animation.stop();\n    this._animation = null;\n    callback && callback(this.__getValue());\n  }\n  /**\r\n   * Stops any animation and resets the value to its original.\r\n   *\r\n   * See https://reactnative.dev/docs/animatedvalue.html#resetanimation\r\n   */\n\n  resetAnimation(callback) {\n    this.stopAnimation(callback);\n    this._value = this._startingValue;\n  }\n  _onAnimatedValueUpdateReceived(value) {\n    this._updateValue(value, false\n    /*flush*/);\n  }\n  /**\r\n   * Interpolates the value before updating the property, e.g. mapping 0-1 to\r\n   * 0-10.\r\n   */\n\n  interpolate(config) {\n    return new AnimatedInterpolation(this, config);\n  }\n  /**\r\n   * Typically only used internally, but could be used by a custom Animation\r\n   * class.\r\n   *\r\n   * See https://reactnative.dev/docs/animatedvalue.html#animate\r\n   */\n\n  animate(animation, callback) {\n    var handle = null;\n    if (animation.__isInteraction) {\n      handle = InteractionManager.createInteractionHandle();\n    }\n    var previousAnimation = this._animation;\n    this._animation && this._animation.stop();\n    this._animation = animation;\n    animation.start(this._value, value => {\n      // Natively driven animations will never call into that callback, therefore we can always\n      // pass flush = true to allow the updated value to propagate to native with setNativeProps\n      this._updateValue(value, true\n      /* flush */);\n    }, result => {\n      this._animation = null;\n      if (handle !== null) {\n        InteractionManager.clearInteractionHandle(handle);\n      }\n      callback && callback(result);\n    }, previousAnimation, this);\n  }\n  /**\r\n   * Typically only used internally.\r\n   */\n\n  stopTracking() {\n    this._tracking && this._tracking.__detach();\n    this._tracking = null;\n  }\n  /**\r\n   * Typically only used internally.\r\n   */\n\n  track(tracking) {\n    this.stopTracking();\n    this._tracking = tracking;\n  }\n  _updateValue(value, flush) {\n    if (value === undefined) {\n      throw new Error('AnimatedValue: Attempting to set value to undefined');\n    }\n    this._value = value;\n    if (flush) {\n      _flush(this);\n    }\n    super.__callListeners(this.__getValue());\n  }\n  __getNativeConfig() {\n    return {\n      type: 'value',\n      value: this._value,\n      offset: this._offset\n    };\n  }\n}\nexport default AnimatedValue;","map":{"version":3,"names":["AnimatedInterpolation","AnimatedWithChildren","InteractionManager","NativeAnimatedHelper","NativeAnimatedAPI","API","_flush","rootNode","animatedStyles","Set","findAnimatedStyles","node","update","add","__getChildren","forEach","animatedStyle","AnimatedValue","constructor","value","Error","_startingValue","_value","_offset","_animation","__detach","__isNative","getValue","__getNativeTag","stopAnimation","__getValue","setValue","stop","_updateValue","setAnimatedNodeValue","setOffset","offset","setAnimatedNodeOffset","flattenOffset","flattenAnimatedNodeOffset","extractOffset","extractAnimatedNodeOffset","callback","stopTracking","resetAnimation","_onAnimatedValueUpdateReceived","interpolate","config","animate","animation","handle","__isInteraction","createInteractionHandle","previousAnimation","start","result","clearInteractionHandle","_tracking","track","tracking","flush","undefined","__callListeners","__getNativeConfig","type"],"sources":["C:/Users/Luc/Documents/ecole/2022_2023/ASI2/Atelier2/atelier2/frontend/node_modules/react-native-web/dist/vendor/react-native/Animated/nodes/AnimatedValue.js"],"sourcesContent":["/**\r\n * Copyright (c) Meta Platforms, Inc. and affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * \r\n * @format\r\n */\r\n'use strict';\r\n\r\nimport AnimatedInterpolation from './AnimatedInterpolation';\r\nimport AnimatedWithChildren from './AnimatedWithChildren';\r\nimport InteractionManager from '../../../../exports/InteractionManager';\r\nimport NativeAnimatedHelper from '../NativeAnimatedHelper';\r\nvar NativeAnimatedAPI = NativeAnimatedHelper.API;\r\n/**\r\n * Animated works by building a directed acyclic graph of dependencies\r\n * transparently when you render your Animated components.\r\n *\r\n *               new Animated.Value(0)\r\n *     .interpolate()        .interpolate()    new Animated.Value(1)\r\n *         opacity               translateY      scale\r\n *          style                         transform\r\n *         View#234                         style\r\n *                                         View#123\r\n *\r\n * A) Top Down phase\r\n * When an Animated.Value is updated, we recursively go down through this\r\n * graph in order to find leaf nodes: the views that we flag as needing\r\n * an update.\r\n *\r\n * B) Bottom Up phase\r\n * When a view is flagged as needing an update, we recursively go back up\r\n * in order to build the new value that it needs. The reason why we need\r\n * this two-phases process is to deal with composite props such as\r\n * transform which can receive values from multiple parents.\r\n */\r\n\r\nfunction _flush(rootNode) {\r\n  var animatedStyles = new Set();\r\n\r\n  function findAnimatedStyles(node) {\r\n    /* $FlowFixMe(>=0.68.0 site=react_native_fb) This comment suppresses an\r\n     * error found when Flow v0.68 was deployed. To see the error delete this\r\n     * comment and run Flow. */\r\n    if (typeof node.update === 'function') {\r\n      animatedStyles.add(node);\r\n    } else {\r\n      node.__getChildren().forEach(findAnimatedStyles);\r\n    }\r\n  }\r\n\r\n  findAnimatedStyles(rootNode);\r\n  /* $FlowFixMe */\r\n\r\n  animatedStyles.forEach(animatedStyle => animatedStyle.update());\r\n}\r\n/**\r\n * Standard value for driving animations.  One `Animated.Value` can drive\r\n * multiple properties in a synchronized fashion, but can only be driven by one\r\n * mechanism at a time.  Using a new mechanism (e.g. starting a new animation,\r\n * or calling `setValue`) will stop any previous ones.\r\n *\r\n * See https://reactnative.dev/docs/animatedvalue.html\r\n */\r\n\r\n\r\nclass AnimatedValue extends AnimatedWithChildren {\r\n  constructor(value) {\r\n    super();\r\n\r\n    if (typeof value !== 'number') {\r\n      throw new Error('AnimatedValue: Attempting to set value to undefined');\r\n    }\r\n\r\n    this._startingValue = this._value = value;\r\n    this._offset = 0;\r\n    this._animation = null;\r\n  }\r\n\r\n  __detach() {\r\n    if (this.__isNative) {\r\n      NativeAnimatedAPI.getValue(this.__getNativeTag(), value => {\r\n        this._value = value;\r\n      });\r\n    }\r\n\r\n    this.stopAnimation();\r\n\r\n    super.__detach();\r\n  }\r\n\r\n  __getValue() {\r\n    return this._value + this._offset;\r\n  }\r\n  /**\r\n   * Directly set the value.  This will stop any animations running on the value\r\n   * and update all the bound properties.\r\n   *\r\n   * See https://reactnative.dev/docs/animatedvalue.html#setvalue\r\n   */\r\n\r\n\r\n  setValue(value) {\r\n    if (this._animation) {\r\n      this._animation.stop();\r\n\r\n      this._animation = null;\r\n    }\r\n\r\n    this._updateValue(value, !this.__isNative\r\n    /* don't perform a flush for natively driven values */\r\n    );\r\n\r\n    if (this.__isNative) {\r\n      NativeAnimatedAPI.setAnimatedNodeValue(this.__getNativeTag(), value);\r\n    }\r\n  }\r\n  /**\r\n   * Sets an offset that is applied on top of whatever value is set, whether via\r\n   * `setValue`, an animation, or `Animated.event`.  Useful for compensating\r\n   * things like the start of a pan gesture.\r\n   *\r\n   * See https://reactnative.dev/docs/animatedvalue.html#setoffset\r\n   */\r\n\r\n\r\n  setOffset(offset) {\r\n    this._offset = offset;\r\n\r\n    if (this.__isNative) {\r\n      NativeAnimatedAPI.setAnimatedNodeOffset(this.__getNativeTag(), offset);\r\n    }\r\n  }\r\n  /**\r\n   * Merges the offset value into the base value and resets the offset to zero.\r\n   * The final output of the value is unchanged.\r\n   *\r\n   * See https://reactnative.dev/docs/animatedvalue.html#flattenoffset\r\n   */\r\n\r\n\r\n  flattenOffset() {\r\n    this._value += this._offset;\r\n    this._offset = 0;\r\n\r\n    if (this.__isNative) {\r\n      NativeAnimatedAPI.flattenAnimatedNodeOffset(this.__getNativeTag());\r\n    }\r\n  }\r\n  /**\r\n   * Sets the offset value to the base value, and resets the base value to zero.\r\n   * The final output of the value is unchanged.\r\n   *\r\n   * See https://reactnative.dev/docs/animatedvalue.html#extractoffset\r\n   */\r\n\r\n\r\n  extractOffset() {\r\n    this._offset += this._value;\r\n    this._value = 0;\r\n\r\n    if (this.__isNative) {\r\n      NativeAnimatedAPI.extractAnimatedNodeOffset(this.__getNativeTag());\r\n    }\r\n  }\r\n  /**\r\n   * Stops any running animation or tracking. `callback` is invoked with the\r\n   * final value after stopping the animation, which is useful for updating\r\n   * state to match the animation position with layout.\r\n   *\r\n   * See https://reactnative.dev/docs/animatedvalue.html#stopanimation\r\n   */\r\n\r\n\r\n  stopAnimation(callback) {\r\n    this.stopTracking();\r\n    this._animation && this._animation.stop();\r\n    this._animation = null;\r\n    callback && callback(this.__getValue());\r\n  }\r\n  /**\r\n   * Stops any animation and resets the value to its original.\r\n   *\r\n   * See https://reactnative.dev/docs/animatedvalue.html#resetanimation\r\n   */\r\n\r\n\r\n  resetAnimation(callback) {\r\n    this.stopAnimation(callback);\r\n    this._value = this._startingValue;\r\n  }\r\n\r\n  _onAnimatedValueUpdateReceived(value) {\r\n    this._updateValue(value, false\r\n    /*flush*/\r\n    );\r\n  }\r\n  /**\r\n   * Interpolates the value before updating the property, e.g. mapping 0-1 to\r\n   * 0-10.\r\n   */\r\n\r\n\r\n  interpolate(config) {\r\n    return new AnimatedInterpolation(this, config);\r\n  }\r\n  /**\r\n   * Typically only used internally, but could be used by a custom Animation\r\n   * class.\r\n   *\r\n   * See https://reactnative.dev/docs/animatedvalue.html#animate\r\n   */\r\n\r\n\r\n  animate(animation, callback) {\r\n    var handle = null;\r\n\r\n    if (animation.__isInteraction) {\r\n      handle = InteractionManager.createInteractionHandle();\r\n    }\r\n\r\n    var previousAnimation = this._animation;\r\n    this._animation && this._animation.stop();\r\n    this._animation = animation;\r\n    animation.start(this._value, value => {\r\n      // Natively driven animations will never call into that callback, therefore we can always\r\n      // pass flush = true to allow the updated value to propagate to native with setNativeProps\r\n      this._updateValue(value, true\r\n      /* flush */\r\n      );\r\n    }, result => {\r\n      this._animation = null;\r\n\r\n      if (handle !== null) {\r\n        InteractionManager.clearInteractionHandle(handle);\r\n      }\r\n\r\n      callback && callback(result);\r\n    }, previousAnimation, this);\r\n  }\r\n  /**\r\n   * Typically only used internally.\r\n   */\r\n\r\n\r\n  stopTracking() {\r\n    this._tracking && this._tracking.__detach();\r\n    this._tracking = null;\r\n  }\r\n  /**\r\n   * Typically only used internally.\r\n   */\r\n\r\n\r\n  track(tracking) {\r\n    this.stopTracking();\r\n    this._tracking = tracking;\r\n  }\r\n\r\n  _updateValue(value, flush) {\r\n    if (value === undefined) {\r\n      throw new Error('AnimatedValue: Attempting to set value to undefined');\r\n    }\r\n\r\n    this._value = value;\r\n\r\n    if (flush) {\r\n      _flush(this);\r\n    }\r\n\r\n    super.__callListeners(this.__getValue());\r\n  }\r\n\r\n  __getNativeConfig() {\r\n    return {\r\n      type: 'value',\r\n      value: this._value,\r\n      offset: this._offset\r\n    };\r\n  }\r\n\r\n}\r\n\r\nexport default AnimatedValue;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}