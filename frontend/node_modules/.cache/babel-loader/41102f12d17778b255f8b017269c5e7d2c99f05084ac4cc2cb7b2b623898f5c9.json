{"ast":null,"code":"/**\r\n * Copyright (c) Meta Platforms, Inc. and affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * \r\n * @format\r\n */\n'use strict';\n\nimport Platform from '../../../exports/Platform';\nimport RCTDeviceEventEmitter from './RCTDeviceEventEmitter';\nimport invariant from 'fbjs/lib/invariant';\n\n/**\r\n * `NativeEventEmitter` is intended for use by Native Modules to emit events to\r\n * JavaScript listeners. If a `NativeModule` is supplied to the constructor, it\r\n * will be notified (via `addListener` and `removeListeners`) when the listener\r\n * count changes to manage \"native memory\".\r\n *\r\n * Currently, all native events are fired via a global `RCTDeviceEventEmitter`.\r\n * This means event names must be globally unique, and it means that call sites\r\n * can theoretically listen to `RCTDeviceEventEmitter` (although discouraged).\r\n */\nexport default class NativeEventEmitter {\n  constructor(nativeModule) {\n    if (Platform.OS === 'ios') {\n      invariant(nativeModule != null, '`new NativeEventEmitter()` requires a non-null argument.');\n      this._nativeModule = nativeModule;\n    }\n  }\n  addListener(eventType, listener, context) {\n    var _this$_nativeModule;\n    (_this$_nativeModule = this._nativeModule) == null ? void 0 : _this$_nativeModule.addListener(eventType);\n    var subscription = RCTDeviceEventEmitter.addListener(eventType, listener, context);\n    return {\n      remove: () => {\n        if (subscription != null) {\n          var _this$_nativeModule2;\n          (_this$_nativeModule2 = this._nativeModule) == null ? void 0 : _this$_nativeModule2.removeListeners(1); // $FlowFixMe[incompatible-use]\n\n          subscription.remove();\n          subscription = null;\n        }\n      }\n    };\n  }\n  /**\r\n   * @deprecated Use `remove` on the EventSubscription from `addListener`.\r\n   */\n\n  removeListener(eventType, listener) {\n    var _this$_nativeModule3;\n    (_this$_nativeModule3 = this._nativeModule) == null ? void 0 : _this$_nativeModule3.removeListeners(1); // NOTE: This will report a deprecation notice via `console.error`.\n    // $FlowFixMe[prop-missing] - `removeListener` exists but is deprecated.\n\n    RCTDeviceEventEmitter.removeListener(eventType, listener);\n  }\n  emit(eventType) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    // Generally, `RCTDeviceEventEmitter` is directly invoked. But this is\n    // included for completeness.\n    RCTDeviceEventEmitter.emit(eventType, ...args);\n  }\n  removeAllListeners(eventType) {\n    var _this$_nativeModule4;\n    invariant(eventType != null, '`NativeEventEmitter.removeAllListener()` requires a non-null argument.');\n    (_this$_nativeModule4 = this._nativeModule) == null ? void 0 : _this$_nativeModule4.removeListeners(this.listenerCount(eventType));\n    RCTDeviceEventEmitter.removeAllListeners(eventType);\n  }\n  listenerCount(eventType) {\n    return RCTDeviceEventEmitter.listenerCount(eventType);\n  }\n}","map":{"version":3,"names":["Platform","RCTDeviceEventEmitter","invariant","NativeEventEmitter","constructor","nativeModule","OS","_nativeModule","addListener","eventType","listener","context","_this$_nativeModule","subscription","remove","_this$_nativeModule2","removeListeners","removeListener","_this$_nativeModule3","emit","_len","arguments","length","args","Array","_key","removeAllListeners","_this$_nativeModule4","listenerCount"],"sources":["C:/Users/Luc/Documents/ecole/2022_2023/ASI2/Atelier2/atelier2/frontend/node_modules/react-native-web/dist/vendor/react-native/NativeEventEmitter/index.js"],"sourcesContent":["/**\r\n * Copyright (c) Meta Platforms, Inc. and affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * \r\n * @format\r\n */\r\n'use strict';\r\n\r\nimport Platform from '../../../exports/Platform';\r\nimport RCTDeviceEventEmitter from './RCTDeviceEventEmitter';\r\nimport invariant from 'fbjs/lib/invariant';\r\n\r\n/**\r\n * `NativeEventEmitter` is intended for use by Native Modules to emit events to\r\n * JavaScript listeners. If a `NativeModule` is supplied to the constructor, it\r\n * will be notified (via `addListener` and `removeListeners`) when the listener\r\n * count changes to manage \"native memory\".\r\n *\r\n * Currently, all native events are fired via a global `RCTDeviceEventEmitter`.\r\n * This means event names must be globally unique, and it means that call sites\r\n * can theoretically listen to `RCTDeviceEventEmitter` (although discouraged).\r\n */\r\nexport default class NativeEventEmitter {\r\n  constructor(nativeModule) {\r\n    if (Platform.OS === 'ios') {\r\n      invariant(nativeModule != null, '`new NativeEventEmitter()` requires a non-null argument.');\r\n      this._nativeModule = nativeModule;\r\n    }\r\n  }\r\n\r\n  addListener(eventType, listener, context) {\r\n    var _this$_nativeModule;\r\n\r\n    (_this$_nativeModule = this._nativeModule) == null ? void 0 : _this$_nativeModule.addListener(eventType);\r\n    var subscription = RCTDeviceEventEmitter.addListener(eventType, listener, context);\r\n    return {\r\n      remove: () => {\r\n        if (subscription != null) {\r\n          var _this$_nativeModule2;\r\n\r\n          (_this$_nativeModule2 = this._nativeModule) == null ? void 0 : _this$_nativeModule2.removeListeners(1); // $FlowFixMe[incompatible-use]\r\n\r\n          subscription.remove();\r\n          subscription = null;\r\n        }\r\n      }\r\n    };\r\n  }\r\n  /**\r\n   * @deprecated Use `remove` on the EventSubscription from `addListener`.\r\n   */\r\n\r\n\r\n  removeListener(eventType, listener) {\r\n    var _this$_nativeModule3;\r\n\r\n    (_this$_nativeModule3 = this._nativeModule) == null ? void 0 : _this$_nativeModule3.removeListeners(1); // NOTE: This will report a deprecation notice via `console.error`.\r\n    // $FlowFixMe[prop-missing] - `removeListener` exists but is deprecated.\r\n\r\n    RCTDeviceEventEmitter.removeListener(eventType, listener);\r\n  }\r\n\r\n  emit(eventType) {\r\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\r\n      args[_key - 1] = arguments[_key];\r\n    }\r\n\r\n    // Generally, `RCTDeviceEventEmitter` is directly invoked. But this is\r\n    // included for completeness.\r\n    RCTDeviceEventEmitter.emit(eventType, ...args);\r\n  }\r\n\r\n  removeAllListeners(eventType) {\r\n    var _this$_nativeModule4;\r\n\r\n    invariant(eventType != null, '`NativeEventEmitter.removeAllListener()` requires a non-null argument.');\r\n    (_this$_nativeModule4 = this._nativeModule) == null ? void 0 : _this$_nativeModule4.removeListeners(this.listenerCount(eventType));\r\n    RCTDeviceEventEmitter.removeAllListeners(eventType);\r\n  }\r\n\r\n  listenerCount(eventType) {\r\n    return RCTDeviceEventEmitter.listenerCount(eventType);\r\n  }\r\n\r\n}"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;;AAEZ,OAAOA,QAAQ,MAAM,2BAA2B;AAChD,OAAOC,qBAAqB,MAAM,yBAAyB;AAC3D,OAAOC,SAAS,MAAM,oBAAoB;;AAE1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,MAAMC,kBAAkB,CAAC;EACtCC,WAAW,CAACC,YAAY,EAAE;IACxB,IAAIL,QAAQ,CAACM,EAAE,KAAK,KAAK,EAAE;MACzBJ,SAAS,CAACG,YAAY,IAAI,IAAI,EAAE,0DAA0D,CAAC;MAC3F,IAAI,CAACE,aAAa,GAAGF,YAAY;IACnC;EACF;EAEAG,WAAW,CAACC,SAAS,EAAEC,QAAQ,EAAEC,OAAO,EAAE;IACxC,IAAIC,mBAAmB;IAEvB,CAACA,mBAAmB,GAAG,IAAI,CAACL,aAAa,KAAK,IAAI,GAAG,KAAK,CAAC,GAAGK,mBAAmB,CAACJ,WAAW,CAACC,SAAS,CAAC;IACxG,IAAII,YAAY,GAAGZ,qBAAqB,CAACO,WAAW,CAACC,SAAS,EAAEC,QAAQ,EAAEC,OAAO,CAAC;IAClF,OAAO;MACLG,MAAM,EAAE,MAAM;QACZ,IAAID,YAAY,IAAI,IAAI,EAAE;UACxB,IAAIE,oBAAoB;UAExB,CAACA,oBAAoB,GAAG,IAAI,CAACR,aAAa,KAAK,IAAI,GAAG,KAAK,CAAC,GAAGQ,oBAAoB,CAACC,eAAe,CAAC,CAAC,CAAC,CAAC,CAAC;;UAExGH,YAAY,CAACC,MAAM,EAAE;UACrBD,YAAY,GAAG,IAAI;QACrB;MACF;IACF,CAAC;EACH;EACA;AACF;AACA;;EAGEI,cAAc,CAACR,SAAS,EAAEC,QAAQ,EAAE;IAClC,IAAIQ,oBAAoB;IAExB,CAACA,oBAAoB,GAAG,IAAI,CAACX,aAAa,KAAK,IAAI,GAAG,KAAK,CAAC,GAAGW,oBAAoB,CAACF,eAAe,CAAC,CAAC,CAAC,CAAC,CAAC;IACxG;;IAEAf,qBAAqB,CAACgB,cAAc,CAACR,SAAS,EAAEC,QAAQ,CAAC;EAC3D;EAEAS,IAAI,CAACV,SAAS,EAAE;IACd,KAAK,IAAIW,IAAI,GAAGC,SAAS,CAACC,MAAM,EAAEC,IAAI,GAAG,IAAIC,KAAK,CAACJ,IAAI,GAAG,CAAC,GAAGA,IAAI,GAAG,CAAC,GAAG,CAAC,CAAC,EAAEK,IAAI,GAAG,CAAC,EAAEA,IAAI,GAAGL,IAAI,EAAEK,IAAI,EAAE,EAAE;MAC1GF,IAAI,CAACE,IAAI,GAAG,CAAC,CAAC,GAAGJ,SAAS,CAACI,IAAI,CAAC;IAClC;;IAEA;IACA;IACAxB,qBAAqB,CAACkB,IAAI,CAACV,SAAS,EAAE,GAAGc,IAAI,CAAC;EAChD;EAEAG,kBAAkB,CAACjB,SAAS,EAAE;IAC5B,IAAIkB,oBAAoB;IAExBzB,SAAS,CAACO,SAAS,IAAI,IAAI,EAAE,wEAAwE,CAAC;IACtG,CAACkB,oBAAoB,GAAG,IAAI,CAACpB,aAAa,KAAK,IAAI,GAAG,KAAK,CAAC,GAAGoB,oBAAoB,CAACX,eAAe,CAAC,IAAI,CAACY,aAAa,CAACnB,SAAS,CAAC,CAAC;IAClIR,qBAAqB,CAACyB,kBAAkB,CAACjB,SAAS,CAAC;EACrD;EAEAmB,aAAa,CAACnB,SAAS,EAAE;IACvB,OAAOR,qBAAqB,CAAC2B,aAAa,CAACnB,SAAS,CAAC;EACvD;AAEF"},"metadata":{},"sourceType":"module","externalDependencies":[]}