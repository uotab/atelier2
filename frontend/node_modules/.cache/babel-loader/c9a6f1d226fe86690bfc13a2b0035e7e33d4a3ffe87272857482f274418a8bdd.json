{"ast":null,"code":"/**\r\n * Copyright (c) Meta Platforms, Inc. and affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * \r\n */\n'use strict';\n\nimport _EventSubscription from './_EventSubscription';\n\n/**\r\n * EmitterSubscription represents a subscription with listener and context data.\r\n */\nclass EmitterSubscription extends _EventSubscription {\n  /**\r\n   * @param {EventEmitter} emitter - The event emitter that registered this\r\n   *   subscription\r\n   * @param {EventSubscriptionVendor} subscriber - The subscriber that controls\r\n   *   this subscription\r\n   * @param {function} listener - Function to invoke when the specified event is\r\n   *   emitted\r\n   * @param {*} context - Optional context object to use when invoking the\r\n   *   listener\r\n   */\n  constructor(emitter, subscriber, listener, context) {\n    super(subscriber);\n    this.emitter = emitter;\n    this.listener = listener;\n    this.context = context;\n  }\n  /**\r\n   * Removes this subscription from the emitter that registered it.\r\n   * Note: we're overriding the `remove()` method of _EventSubscription here\r\n   * but deliberately not calling `super.remove()` as the responsibility\r\n   * for removing the subscription lies with the EventEmitter.\r\n   */\n\n  remove() {\n    this.emitter.removeSubscription(this);\n  }\n}\nexport default EmitterSubscription;","map":{"version":3,"names":["_EventSubscription","EmitterSubscription","constructor","emitter","subscriber","listener","context","remove","removeSubscription"],"sources":["C:/Users/Luc/Documents/ecole/2022_2023/ASI2/Atelier2/atelier2/frontend/node_modules/react-native-web/dist/vendor/react-native/emitter/_EmitterSubscription.js"],"sourcesContent":["/**\r\n * Copyright (c) Meta Platforms, Inc. and affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * \r\n */\r\n'use strict';\r\n\r\nimport _EventSubscription from './_EventSubscription';\r\n\r\n/**\r\n * EmitterSubscription represents a subscription with listener and context data.\r\n */\r\nclass EmitterSubscription extends _EventSubscription {\r\n  /**\r\n   * @param {EventEmitter} emitter - The event emitter that registered this\r\n   *   subscription\r\n   * @param {EventSubscriptionVendor} subscriber - The subscriber that controls\r\n   *   this subscription\r\n   * @param {function} listener - Function to invoke when the specified event is\r\n   *   emitted\r\n   * @param {*} context - Optional context object to use when invoking the\r\n   *   listener\r\n   */\r\n  constructor(emitter, subscriber, listener, context) {\r\n    super(subscriber);\r\n    this.emitter = emitter;\r\n    this.listener = listener;\r\n    this.context = context;\r\n  }\r\n  /**\r\n   * Removes this subscription from the emitter that registered it.\r\n   * Note: we're overriding the `remove()` method of _EventSubscription here\r\n   * but deliberately not calling `super.remove()` as the responsibility\r\n   * for removing the subscription lies with the EventEmitter.\r\n   */\r\n\r\n\r\n  remove() {\r\n    this.emitter.removeSubscription(this);\r\n  }\r\n\r\n}\r\n\r\nexport default EmitterSubscription;"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;;AAEZ,OAAOA,kBAAkB,MAAM,sBAAsB;;AAErD;AACA;AACA;AACA,MAAMC,mBAAmB,SAASD,kBAAkB,CAAC;EACnD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEE,WAAW,CAACC,OAAO,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,OAAO,EAAE;IAClD,KAAK,CAACF,UAAU,CAAC;IACjB,IAAI,CAACD,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACE,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACC,OAAO,GAAGA,OAAO;EACxB;EACA;AACF;AACA;AACA;AACA;AACA;;EAGEC,MAAM,GAAG;IACP,IAAI,CAACJ,OAAO,CAACK,kBAAkB,CAAC,IAAI,CAAC;EACvC;AAEF;AAEA,eAAeP,mBAAmB"},"metadata":{},"sourceType":"module","externalDependencies":[]}