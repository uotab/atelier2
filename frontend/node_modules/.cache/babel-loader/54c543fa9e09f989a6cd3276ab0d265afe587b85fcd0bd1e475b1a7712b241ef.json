{"ast":null,"code":"/**\r\n * Copyright (c) Meta Platforms, Inc. and affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * \r\n */\n'use strict';\n\nimport invariant from 'fbjs/lib/invariant';\n\n/**\r\n * EventSubscriptionVendor stores a set of EventSubscriptions that are\r\n * subscribed to a particular event type.\r\n */\nclass EventSubscriptionVendor {\n  constructor() {\n    this._subscriptionsForType = {};\n  }\n  /**\r\n   * Adds a subscription keyed by an event type.\r\n   *\r\n   * @param {string} eventType\r\n   * @param {EventSubscription} subscription\r\n   */\n\n  addSubscription(eventType, subscription) {\n    invariant(subscription.subscriber === this, 'The subscriber of the subscription is incorrectly set.');\n    if (!this._subscriptionsForType[eventType]) {\n      this._subscriptionsForType[eventType] = [];\n    }\n    var key = this._subscriptionsForType[eventType].length;\n    this._subscriptionsForType[eventType].push(subscription);\n    subscription.eventType = eventType;\n    subscription.key = key;\n    return subscription;\n  }\n  /**\r\n   * Removes a bulk set of the subscriptions.\r\n   *\r\n   * @param {?string} eventType - Optional name of the event type whose\r\n   *   registered supscriptions to remove, if null remove all subscriptions.\r\n   */\n\n  removeAllSubscriptions(eventType) {\n    if (eventType == null) {\n      this._subscriptionsForType = {};\n    } else {\n      delete this._subscriptionsForType[eventType];\n    }\n  }\n  /**\r\n   * Removes a specific subscription. Instead of calling this function, call\r\n   * `subscription.remove()` directly.\r\n   *\r\n   * @param {object} subscription\r\n   */\n\n  removeSubscription(subscription) {\n    var eventType = subscription.eventType;\n    var key = subscription.key;\n    var subscriptionsForType = this._subscriptionsForType[eventType];\n    if (subscriptionsForType) {\n      delete subscriptionsForType[key];\n    }\n  }\n  /**\r\n   * Returns the array of subscriptions that are currently registered for the\r\n   * given event type.\r\n   *\r\n   * Note: This array can be potentially sparse as subscriptions are deleted\r\n   * from it when they are removed.\r\n   *\r\n   * TODO: This returns a nullable array. wat?\r\n   *\r\n   * @param {string} eventType\r\n   * @returns {?array}\r\n   */\n\n  getSubscriptionsForType(eventType) {\n    return this._subscriptionsForType[eventType];\n  }\n}\nexport default EventSubscriptionVendor;","map":{"version":3,"names":["invariant","EventSubscriptionVendor","constructor","_subscriptionsForType","addSubscription","eventType","subscription","subscriber","key","length","push","removeAllSubscriptions","removeSubscription","subscriptionsForType","getSubscriptionsForType"],"sources":["C:/Users/Luc/Documents/ecole/2022_2023/ASI2/Atelier2/atelier2/frontend/node_modules/react-native-web/dist/vendor/react-native/emitter/_EventSubscriptionVendor.js"],"sourcesContent":["/**\r\n * Copyright (c) Meta Platforms, Inc. and affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * \r\n */\r\n'use strict';\r\n\r\nimport invariant from 'fbjs/lib/invariant';\r\n\r\n/**\r\n * EventSubscriptionVendor stores a set of EventSubscriptions that are\r\n * subscribed to a particular event type.\r\n */\r\nclass EventSubscriptionVendor {\r\n  constructor() {\r\n    this._subscriptionsForType = {};\r\n  }\r\n  /**\r\n   * Adds a subscription keyed by an event type.\r\n   *\r\n   * @param {string} eventType\r\n   * @param {EventSubscription} subscription\r\n   */\r\n\r\n\r\n  addSubscription(eventType, subscription) {\r\n    invariant(subscription.subscriber === this, 'The subscriber of the subscription is incorrectly set.');\r\n\r\n    if (!this._subscriptionsForType[eventType]) {\r\n      this._subscriptionsForType[eventType] = [];\r\n    }\r\n\r\n    var key = this._subscriptionsForType[eventType].length;\r\n\r\n    this._subscriptionsForType[eventType].push(subscription);\r\n\r\n    subscription.eventType = eventType;\r\n    subscription.key = key;\r\n    return subscription;\r\n  }\r\n  /**\r\n   * Removes a bulk set of the subscriptions.\r\n   *\r\n   * @param {?string} eventType - Optional name of the event type whose\r\n   *   registered supscriptions to remove, if null remove all subscriptions.\r\n   */\r\n\r\n\r\n  removeAllSubscriptions(eventType) {\r\n    if (eventType == null) {\r\n      this._subscriptionsForType = {};\r\n    } else {\r\n      delete this._subscriptionsForType[eventType];\r\n    }\r\n  }\r\n  /**\r\n   * Removes a specific subscription. Instead of calling this function, call\r\n   * `subscription.remove()` directly.\r\n   *\r\n   * @param {object} subscription\r\n   */\r\n\r\n\r\n  removeSubscription(subscription) {\r\n    var eventType = subscription.eventType;\r\n    var key = subscription.key;\r\n    var subscriptionsForType = this._subscriptionsForType[eventType];\r\n\r\n    if (subscriptionsForType) {\r\n      delete subscriptionsForType[key];\r\n    }\r\n  }\r\n  /**\r\n   * Returns the array of subscriptions that are currently registered for the\r\n   * given event type.\r\n   *\r\n   * Note: This array can be potentially sparse as subscriptions are deleted\r\n   * from it when they are removed.\r\n   *\r\n   * TODO: This returns a nullable array. wat?\r\n   *\r\n   * @param {string} eventType\r\n   * @returns {?array}\r\n   */\r\n\r\n\r\n  getSubscriptionsForType(eventType) {\r\n    return this._subscriptionsForType[eventType];\r\n  }\r\n\r\n}\r\n\r\nexport default EventSubscriptionVendor;"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;;AAEZ,OAAOA,SAAS,MAAM,oBAAoB;;AAE1C;AACA;AACA;AACA;AACA,MAAMC,uBAAuB,CAAC;EAC5BC,WAAW,GAAG;IACZ,IAAI,CAACC,qBAAqB,GAAG,CAAC,CAAC;EACjC;EACA;AACF;AACA;AACA;AACA;AACA;;EAGEC,eAAe,CAACC,SAAS,EAAEC,YAAY,EAAE;IACvCN,SAAS,CAACM,YAAY,CAACC,UAAU,KAAK,IAAI,EAAE,wDAAwD,CAAC;IAErG,IAAI,CAAC,IAAI,CAACJ,qBAAqB,CAACE,SAAS,CAAC,EAAE;MAC1C,IAAI,CAACF,qBAAqB,CAACE,SAAS,CAAC,GAAG,EAAE;IAC5C;IAEA,IAAIG,GAAG,GAAG,IAAI,CAACL,qBAAqB,CAACE,SAAS,CAAC,CAACI,MAAM;IAEtD,IAAI,CAACN,qBAAqB,CAACE,SAAS,CAAC,CAACK,IAAI,CAACJ,YAAY,CAAC;IAExDA,YAAY,CAACD,SAAS,GAAGA,SAAS;IAClCC,YAAY,CAACE,GAAG,GAAGA,GAAG;IACtB,OAAOF,YAAY;EACrB;EACA;AACF;AACA;AACA;AACA;AACA;;EAGEK,sBAAsB,CAACN,SAAS,EAAE;IAChC,IAAIA,SAAS,IAAI,IAAI,EAAE;MACrB,IAAI,CAACF,qBAAqB,GAAG,CAAC,CAAC;IACjC,CAAC,MAAM;MACL,OAAO,IAAI,CAACA,qBAAqB,CAACE,SAAS,CAAC;IAC9C;EACF;EACA;AACF;AACA;AACA;AACA;AACA;;EAGEO,kBAAkB,CAACN,YAAY,EAAE;IAC/B,IAAID,SAAS,GAAGC,YAAY,CAACD,SAAS;IACtC,IAAIG,GAAG,GAAGF,YAAY,CAACE,GAAG;IAC1B,IAAIK,oBAAoB,GAAG,IAAI,CAACV,qBAAqB,CAACE,SAAS,CAAC;IAEhE,IAAIQ,oBAAoB,EAAE;MACxB,OAAOA,oBAAoB,CAACL,GAAG,CAAC;IAClC;EACF;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAGEM,uBAAuB,CAACT,SAAS,EAAE;IACjC,OAAO,IAAI,CAACF,qBAAqB,CAACE,SAAS,CAAC;EAC9C;AAEF;AAEA,eAAeJ,uBAAuB"},"metadata":{},"sourceType":"module","externalDependencies":[]}